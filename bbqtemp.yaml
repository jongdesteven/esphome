esphome:
  name: bbqtemp
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Doorbell Fallback Hotspot"
    password: "57ZDT3EJmzWO"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

time:
  - platform: homeassistant
    id: homeassistant_time

ota:
  password: !secret ota_password

i2c:
  sda: D2
  scl: D1

spi:
  miso_pin: D4
  clk_pin: D6

font:
  - file: "lucida_sans_unicode.ttf"
    id: font1
    size: 32
  - file: "lucida_sans_unicode.ttf"
    id: font2
    size: 12
  - file: "lucida_sans_unicode.ttf"
    id: font3
    size: 9

globals:
  - id: ringer
    type: bool
    restore_value: true
    initial_value: 'true'

text_sensor:
  - platform: version
    name:  ESPHome Version
  
  - platform: homeassistant
    name: "BBQtemp Ring time (ms)"
    entity_id: input_number.doorbell_ring_time
    id: doorbell_ring_time_ms
    internal: true

sensor:
  - platform: uptime
    name: BBQtemp uptime

  - platform: wifi_signal
    name: BBQtemp WiFi Signal
    update_interval: 60s

  - platform: homeassistant
    id: outside_temp
    entity_id: sensor.waalre_temperature
    internal: true

  - platform: homeassistant
    id: zolder_temp
    entity_id: sensor.zolder_temperature
    internal: true

  - platform: max31855
    name: BBQ Temp 1
    id: sensor1
    cs_pin: D7
    update_interval: 5s

  - platform: max31855
    name: BBQ Temp 2
    id: sensor2
    cs_pin: D5
    update_interval: 5s

switch:
  - platform: restart
    name: BBQtemp Restart
  
display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    lambda: |-
      // Title
      it.print(64,0, id(font3), TextAlign::TOP_CENTER, "Zolder");
      // Print time in HH:MM format
      it.strftime(0, 25, id(font1), TextAlign::CENTER_LEFT, "%H:%M", id(homeassistant_time).now());
      // temp
      if (id(zolder_temp).has_state()) {
        it.printf(127, 50, id(font2), TextAlign::BASELINE_RIGHT, "Zolder: %.1f째", id(zolder_temp).state);
      }
      if (id(outside_temp).has_state()) {
        it.printf(127, 63, id(font2), TextAlign::BASELINE_RIGHT, "Buiten: %.1f째", id(outside_temp).state);
      }
      //sensor1
      //it.printf(127, 0, id(font2), TextAlign::TOP_RIGHT, "%.1f째", id(sensor1).state);
      //it.printf(127, 15, id(font2), TextAlign::TOP_RIGHT, "%.1f째", id(sensor2).state);

