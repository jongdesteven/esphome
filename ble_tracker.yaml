esphome:
  name: ble_tracker
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_password
  domain: .lan

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ble track Fallback Hotspot"
    password: "57ZDT3EJmzWO"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

time:
  - platform: homeassistant
    id: homeassistant_time

ota:
  password: !secret ota_password

sensor:
# - platform: uptime
#  name: "afzuiging uptime"

  - platform: wifi_signal
    name: BLE Tracker WiFi Signal
    update_interval: 60s

  - platform: xiaomi_hhccjcy01
    mac_address: 'C4:7C:8D:6C:EF:7B'
    temperature:
      name: "Woonkamer Boom Temperature"
    moisture:
      name: "Woonkamer Boom Moisture"
    illuminance:
      name: "Woonkamer Boom Illuminance"
    conductivity:
      name: "Woonkamer Boom Soil Conductivity"
    battery_level:
      name: "Woonkamer Boom Battery Level"
      
  - platform: template
    name: "FitBit Aria Scale"
    id: aria_sensor

switch:
  - platform: restart
    name: BLE Tracker Restart

esp32_ble_tracker:
  on_ble_service_data_advertise:
    - mac_address: A4:C1:38:B0:1E:CC
      service_uuid: 181D
      then:
        - lambda: |-
            id(aria_sensor).publish_state(x[0]);
            ESP_LOGD("ble_adv", " data: %d", x[0]);
        

# on_ble_advertise:
#   - mac_address: A4:C1:38:B0:1E:CC
#     then:
#       - lambda: |-
#           ESP_LOGD("ble_adv", "New BLE device");
#           ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
#           ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
#           ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
#           for (auto uuid : x.get_service_uuids()) {
#               ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
#           }
#           ESP_LOGD("ble_adv", "  Advertised service data:");
#           for (auto data : x.get_service_datas()) {
#               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
#           }
#           ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
#           for (auto data : x.get_manufacturer_datas()) {
#               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
#           }
