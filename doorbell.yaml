esphome:
  name: doorbell
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_password
  domain: .lan

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Doorbell Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

time:
  - platform: homeassistant
    id: homeassistant_time

ota:
  password: !secret ota_password

globals:
  - id: ringer
    type: bool
    restore_value: true
    initial_value: 'true'

text_sensor:
  - platform: version
    name: Doorbell ESPHome Version

number:
  - platform: template
    name: "Doorbell Ring time (ms)"
    id: doorbell_ring_time_ms
    optimistic: true
    min_value: 5
    max_value: 1000
    initial_value: 100
    restore_value: true
    entity_category: config
    step: 5
    
  - platform: template
    name: "Doorbell Cooldown (s)"
    id: doorbell_cooldown_s
    optimistic: true
    min_value: 1
    max_value: 60
    initial_value: 5
    restore_value: true
    entity_category: config
    step: 1

sensor:
  #- platform: uptime
  #  name: Doorbell uptime

  - platform: wifi_signal
    name: Doorbell WiFi Signal
    update_interval: 60s

switch:
  - platform: restart
    name: Doorbell Restart
  
  #needed to mute ringer
  - platform: template
    name: "Doorbell Ringer On"
    id: ringer_on
    restore_state: false
    turn_on_action:
      - globals.set:
          id: ringer
          value: 'true'
    turn_off_action:
      - globals.set:
          id: ringer
          value: 'false'
    lambda: |-
      return id(ringer);

  # Ringer bell connected to D0 / gpio16
  - platform: gpio
    pin: D0
    name: "Doorbell Bell"
    id: bell
    restore_mode: ALWAYS_OFF
    on_turn_on: 
      - script.execute: ring_bell
    
script:
  - id: bell_cooldown
    mode: single
    then:
      - switch.turn_off: bell
      - switch.turn_off: ringer_on
      - delay: !lambda |-
          return id(doorbell_cooldown_s).state * 1000;
      - switch.turn_on: ringer_on
      
  - id: ring_bell
    mode: single
    then:
      if:
        condition:
          switch.is_on: ringer_on
        then:
          - switch.turn_on: bell
          - delay: !lambda |-
              return id(doorbell_ring_time_ms).state;
          - switch.turn_off: bell

binary_sensor:
  # Doorbell Button at frontdoor on D3
  - platform: gpio
    name: "Doorbell Button"
    pin:
      number: D3
      inverted: true
    id: button
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - script.execute: ring_bell
    on_release:
      then:
        - script.execute: bell_cooldown
  
